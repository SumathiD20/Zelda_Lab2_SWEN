# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Build and test in Feature

on:
  push:
    branches:
      - 'feat*'
      - Development
  pull_request:
    branches:
      - Development

permissions:
  contents: read

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    - name: Set up Python 3.10
      uses: actions/setup-python@v3
      with:
        python-version: "3.10"
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest build
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      run: |
        mkdir -p dist
        cp scripts/* dist/
      with:
        name: build-files
        path: dist/
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

  test:
    runs-on: ubuntu-latest
    needs: build                                # Needs build job to complete for the test job to start
    steps:
    - uses: actions/checkout@v4
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: build-files
    - name: Install dependencies
      run: pip install -r requirements.txt
    - name: Test with pytest
      run: |
        echo "Running the unit tests..."
        export PYTHONPATH=testing
        export PYTHONPATH=scripts
        pytest

  deploy:
    runs-on: ubuntu-latest
    needs: [build, test]                               # Needs build and test job to succeed for the deploy job to start
    if: success()
    steps:
    - name: Deploy application
      run: |
        echo "Deploying the application..."
        echo "Deployed to the production sucessfully"
